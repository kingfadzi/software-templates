apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template-rest
  title: Spring Boot REST Service
  description: Create a simple microservice using REST and Spring Boot Java
  tags:
    - recommended
    - java
    - grpc
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (io.backstage.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - eros.butterflycluster.com
    - title: Deployment Options
      properties:
        openshift_environment_url:
          title: OpenShift Environment URL
          type: string
          description: Select the URL for the OpenShift environment where the application will be deployed.
          enum:
            - "https://openshift-dev-us.example.com"
            - "https://openshift-dev-eu.example.com"
        openshift_project:
          title: OpenShift Project
          type: string
          description: The OpenShift project where the application will be deployed.


  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .gitlab-ci.yml
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_apiVersion: scaffolder.backstage.io/v1beta3
            kind: Template
            metadata:
              name: springboot-template-rest
              title: Spring Boot REST Service
              description: Create a simple microservice using REST and Spring Boot Java
              tags:
                - recommended
                - java
                - grpc
            spec:
              owner: service@example.com
              type: service

              parameters:
                - title: Provide some simple information
                  required:
                    - component_id
                    - owner
                    - java_package_name
                  properties:
                    component_id:
                      title: Name
                      type: string
                      description: Unique name of the component
                      ui:field: EntityNamePicker
                    java_package_name:
                      title: Java Package Name
                      type: string
                      description: Name for the java package. eg (io.backstage.blah)
                    description:
                      title: Description
                      type: string
                      description: Help others understand what this website is for.
                    owner:
                      title: Owner
                      type: string
                      description: Owner of the component
                      ui:field: OwnerPicker
                      ui:options:
                        allowedKinds:
                          - Group
                - title: Choose a location
                  required:
                    - repoUrl
                  properties:
                    repoUrl:
                      title: Repository Location
                      type: string
                      ui:field: RepoUrlPicker
                      ui:options:
                        allowedHosts:
                          - eros.butterflycluster.com

              steps:
                - id: template
                  name: Fetch Skeleton + Template
                  action: fetch:template
                  input:
                    url: ./skeleton
                    copyWithoutRender:
                      - .gitlab-ci.yml
                    values:
                      component_id: ${{ parameters.component_id }}
                      description: ${{ parameters.description }}
                      artifact_id: ${{ parameters.component_id }}
                      java_package_name: ${{ parameters.java_package_name }}
                      owner: ${{ parameters.owner }}
                      destination: ${{ parameters.repoUrl | parseRepoUrl }}
                      http_port: 8080

                - id: publish
                  name: Publish
                  action: publish:gitlab
                  input:
                    allowedHosts: [ "eros.butterflycluster.com" ]
                    description: This is ${{ parameters.component_id }}
                    repoUrl: ${{ parameters.repoUrl }}

                - id: register
                  name: Register
                  action: catalog:register
                  input:
                    repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
                    catalogInfoPath: "/catalog-info.yaml"

              output:
                links:
                  - title: Repository
                    url: ${{ steps.publish.output.remoteUrl }}
                  - title: Open in catalog
                    icon: catalog
                    entityRef: ${{ steps.register.output.entityRef }}
            name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts: ["eros.butterflycluster.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
